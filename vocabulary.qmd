---
title: "Git and GitHub vocabulary"
author: Marie-Noelle Sallaberry
date: 05/01/2024
format: html
---

In this document, we will learn the terminology and most used commands in Git and GitHub.
Let's start with an explanation of what Git and GitHub are and how they differ.

## What are Git and GitHub?

Git is a software open source version control system for tracking changes on computer files. This is a local system, not a web/cloud based system.
In most cases, you need to command line to use Git, even though some IDE like Visual Studio Code or RStudio have integrated Git. I've heard that using a command line (like Bash) works better.

GitHub is a code hosting platform for collaboration and version control. It's a website and cloud based, so users can store their code or documents in repositories that are either public (anyone can see and copy the files) or private (the owner of the GitHub account i). GitHub also has additional functionalities like codespace, projects, and automation.

In a nutshell, Git tacks changes on your computer, while GitHub hosts those documents in the cloud and facilitates collaboration work on files. 

Here is a nice video if you want to learn more:
{{< video "https://www.youtube.com/watch?v=wpISo9TNjfU&t=258s" >}}

## Git commands

Gits needs to be installed on your computer. You can go to their [website]("https://git-scm.com/") to do so. You can install Bash, a command line, at the same time. 

There are a few commands that are good to know:  
- git pull: used to update your local repository (on your computer). If your repository (repo) is a clone of a GitHub repo and changes have been made on GitHub, your repository will be updated.  
- git checkout -b[branch]: creates and checkout a new branch. You would then use git push -u origin [branch] to create the branch on GitHub. The -u stands for upstream, it links the branch on your computer to the new one on GitHub.  
- git add: stages the changes you've made. It simply means that you file is ready to commit. You can modify different files and stage them so that you only do one commit.  
- git commit: this is the phase where your changes get tag with a date, author name etc. You can (and should) add a very short message explaining what changes have been made. The command to commit with a message is: git commit -m "Your message here".  
- git push: sends/updates the GitHub repo.  

Note: those are simplified command, and are usually followed by additional command. For example, to push your changes to GitHub, you'll have to specify which branch to push onto. The command might look like this:
git push origin main

If working from VSCode or RStudio, you shouldn't have to worry too much about these commands. But you should understand what they are used for.
Here is a picture of some git commands on Bash:

![Git commands in Bash](Bash_commands.png "Screenshot of Bash")

## Git terminology

- Working tree: a set of nested directories and files that contain the project.  
- Repo (repository): the root directory  
- Commit: commit the changes so people can see them  
- Branch: "a named series of linked commits". The default branch, when you create the repo, is called "main" or "master" and the most recent commit is called the HEAD. To make the analogy with road, main would be one road that everyone takes, but at any point, it is possible to take a different road parallel to the main (create a new branch), and go back to the main later (merge). 
Nothing happening on the parallel branch(es) will affect the main branch until the merge is done.
This is a great way to experiment on something without risking messing up the main program.  
- Remote: reference to another Git repo. When initializing a repo on the computer, Git creates a remote called origin, which will be the default remote to push/pull operation. On GitHub, that remote may be called main (main branch) or any name used for the branches.

![Exemple of Git branches - Picture from digitalvarys.com](git_op.jpg){fig-alt="Picture of 3 Git branches" width=80%}

## GitHub terminology

Let's now take a look at some of the terminology you may encounter when working with GitHub. GitHub being a place to store your git repo in the cloud, you will find that they share a lot of the words: for exemple, commit, branch, etc.
Let's add a few more:

- Pull request: if you don't have complete access to a repo as a collaborator, you won't be able to push your commits to the main branch. You have to send a pull request to the owner/maintainer. The maintainer might ask for some modification before merging.  
- Fork: if you want to work independently on a repo that you don't own, you can fork that repo to your personal GitHub. The repo will appear among your other repo and tell you if updates have been made to the main repo so you new to update (using the button "sync fork"). You can modify the forked repo and push your changes to the main repo (using "Contribute" button). Note: when someone fork a repo, they create a temporary branch. 
- Clone: clone is the equivalent of forking, but it's between GitHub and your local machine instead of between two GitHub accounts.   
- Merging: accepting the pull request and modifying the selected branch. The maintainer can select which commits to merge.  
- Readme.md: a markdown file to describe the project, and eventually the rules to contribute.  

![Exemple of a forked repo on my GitHub account. Notice the line that says "This branch is up to date with Horiana/tools/main. The fork can be ahead by x commits if I've made changes, in which case I could hit the "Contribute" button. Or it could be behind main, in which case I would use the button "Sync fork"](Tools_fork.png "Image of a forked repo")